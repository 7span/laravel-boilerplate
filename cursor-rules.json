{
    "name": "Laravel Rules",
    "description": "Ruleset to guide Cursor AI in logic generation.",
    "tokenLimit": 3000,
    "rules": [
        {
            "match": "**/*.php",
            "prompts": [
                "Use PHP 8.3+ features where appropriate.",
                "Implement a default Pint configuration for code styling.",
                "Follow PSR-12 formatting: 4-space indentation, opening braces on the next line, proper spacing.",
                "Follow Laravel best practices and conventions.",
                "Use strict type declarations and return types when possible.",
                "Use dependency injection for all services or classes — avoid static or facade usage.",
                "Never use `env()` outside of configuration files.",
                "Keep methods short and focused — prefer single responsibility methods (< 25 lines).",
                "Method names: Use camelCase (e.g., myMethod).",
                "Variable and property names: Use camelCase (e.g., myVariable).",
                "Constants and enum case names: Use SCREAMING_SNAKE_CASE (e.g., MY_CONSTANT)."
            ]
        },
        {
            "match": "app/Http/Controllers/**/*.php",
            "prompts": [
                "Controllers must be thin and follow RESTful conventions.",
                "Each controller method must begin with a PHPDoc-style comment summarizing its purpose in one or two lines.",
                "Only call service layer methods inside controllers.",
                "Avoid writing any queries or model access in controllers — only use methods from the service layer.",
                "Use dependency injection to load services.",
                "Use Laravel's request validation via FormRequest — keep validation logic minimal.",
                "Use `success()`, `resource()` or `collection()` methods from the ApiResponser trait for all responses — do not use response()->json() or Laravel Resource classes.",
                "In case of error, throw `CustomException` (from App\\Exceptions\\CustomException) with a message and valid HTTP status code instead of using the `error()` method from the ApiResponser trait.",
                "The error message must come from the localization file (resources/lang/en).",
                "Use an existing module-based language file if applicable (e.g., user.php, auth.php); otherwise, create a new file with a matching module name.",
                "Always use localization keys when throwing exceptions (e.g., `__('user.failed_to_fetch')`)."
            ]
        },
        {
            "match": "app/Services/**/*.php",
            "prompts": [
                "Service classes must contain all business logic.",
                "Each service method must begin with a PHPDoc-style comment summarizing its purpose in one or two lines.",
                "Query logic should use BaseModel’s `filterByRequest()` or similar query builders.",
                "Avoid any form of validation or response formatting in services.",
                "Keep service classes stateless and clean — extract reusable logic to private methods.",
                "Avoid raw DB queries — use Eloquent and Laravel query scopes (including those defined in BaseModel).",
                "Use eager loading (`with`, `withCount`) where needed.",
                "Throw exceptions for not found or business errors — let the controller handle them.",
                "Use localized messages when throwing exceptions (e.g., `__('user.already_exists')`)."
            ]
        },
        {
            "match": "app/Models/**/*.php",
            "prompts": [
                "Extend BaseModel to get access to common query builder methods.",
                "Define query scopes to encapsulate reusable filters.",
                "Define relationships clearly using `hasOne`, `hasMany`, `belongsTo`, etc.",
                "Use attribute casting and accessors/mutators for computed values.",
                "Do not write business logic in models — keep them focused on data structure and relationships.",
                "Avoid accessing request or config inside model methods."
            ]
        },
        {
            "match": "app/Http/Requests/**/*.php",
            "prompts": [
                "FormRequest should handle validation rules and authorization logic.",
                "Keep validation rules clean and declarative.",
                "Avoid business logic or DB access inside FormRequest."
            ]
        }
    ]
}